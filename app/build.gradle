plugins {
    alias(libs.plugins.android.application)
    id 'com.google.gms.google-services'
    id 'com.huawei.agconnect'
}

def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(rootProject.file("keystore/keystore.properties")))

android {
    namespace "com.thalesgroup.tshpaysample"

    defaultConfig {
        applicationId "com.thalesgroup.tshpaysample"
        minSdkVersion 23
        targetSdkVersion 36
        compileSdkVersion 36
        versionCode 1302
        versionName "1.3.rc02"
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file("${project.rootDir}/${keystoreProperties['debugStoreFile']}")
            storePassword keystoreProperties['debugStorePassword']
            keyAlias keystoreProperties['debugKeyAlias']
            keyPassword keystoreProperties['debugKeyPassword']
        }
        release {
            storeFile file("${project.rootDir}/${keystoreProperties['releaseStoreFile']}")
            storePassword keystoreProperties['releaseStorePassword']
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
        }
    }

    // Create link between environment and flavour
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            buildConfigField "int", "LOG_LEVEL", "2"  // Set 2..7, the lower the number the more logs are displayed, 2 == Log.VERBOSE
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            buildConfigField "int", "LOG_LEVEL", "4"  // Set 2..7, the lower the number the more logs are displayed, 4 == Log.INFO
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        buildConfig true
    }

    splits {
        abi {
            enable true             // Enable ABI splits
            reset()                 // Clear default ABI list
//            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"  // ABIs to target
            include "armeabi-v7a", "arm64-v8a"  // ABIs to target
            universalApk false      // Set to true if you want a universal APK too
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            def versionName = variant.versionName ?: "unknown"
            def variantName = variant.name

            def baseName = "TSHPaySample-${versionName}"

            if (abi != null) {
                // ABI specific APK
                outputFileName = "${baseName}-${abi}-${variantName}.apk"
            } else {
                // For universal or non-ABI split APKs
                outputFileName = "${baseName}-${variantName}.apk"
            }
        }
    }
}

dependencies {

    // Android support library
    implementation libs.appcompat
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.play.services.base
    implementation libs.biometric

    // TSH Pay SDK
    debugImplementation (files("libs/TSHPaySDK-dev-6.12.0.rc01.aar"))
    releaseImplementation (files("libs/TSHPaySDK-release-6.12.0.rc01.aar"))

    // SDK Dependency
    implementation(libs.jna) { artifact { type = 'aar' } }

    // FCM - Google push notifications
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.messaging
    implementation libs.firebase.analytics

    // HMS - Huawei push notifications.
    implementation libs.push

    // Multi-dex application to prevent any size issue.
    implementation libs.multidex
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}